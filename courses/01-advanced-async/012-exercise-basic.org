#+Title: Async Wrapper
#+SETUPFILE: ../../reveal.setup

* Hyperpipe

+ https://github.com/spacekookie/hyperpipe
+ A toy library for communicating between different processes
+ Doesn't use async I/O
+ Implement an async wrapper!

* How to use

\\

+ Construct two pipe endpoints (in some directory)
+ Push data in, pull data out
+ Pull _does not block_ to wait for data

#+BEGIN_SRC rust
  fn main() {
      let pipe_path = Path::new("buffer-dir");

      let mut p1 = HyperPipe::new(pipe_path).unwrap();
      let v1 = vec![1, 2, 3, 4, 5, 6];
      p1.push(v1.clone()).unwrap();

      let mut p2 = HyperPipe::new(pipe_path).unwrap();
      let v2 = p2.pull().unwrap();
      assert_eq!(v1, v2);
  }
#+END_SRC

* AsyncHyperPipe

\\

+ Construct a HyperPipe
+ Create a polling future
+ Remember to wake yourself

  #+BEGIN_SRC rust
    pub struct AsyncHyperPipe {
        inner: HyperPipe
    }

    impl Future for AsyncHyperPipe {
        type Output = Vec<u8>;
        fn poll(self: Pin<&mut Self>, ctx: &mut Context) -> Poll<Self::Output> {
            todo!()
        }
    }
  #+END_SRC

* 

#+BEGIN_SRC rust
  let pipe = AsyncHypePipe::new();
  
  println("hmmm,,, data: {:?}", pipe.await);
#+END_SRC

* [[file:README.org][Back to index]]

